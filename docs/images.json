{
  "notes": [
    "add /c_scale,w_500/ param to 'imageSrcSmall' URLs after /upload/ param"
  ],
  "images": [
    {
      "title": "Space in my body",
      "imageSeries": [
        {
          "src": "https://res.cloudinary.com/ericyd/image/upload/v1610072964/2021-01-07T20.12.01-seed-99178672_bdw5oe.png",
          "srcSmall": "https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1610072964/2021-01-07T20.12.01-seed-99178672_bdw5oe.png"
        }
      ],
      "description": "This was a really fun sketch to develop. It is heavily influenced by one of my favorite artists on Instagram, <a href='https://www.instagram.com/jetsyart/'>jetsyart</a>. They do not use generative methods but I find their asthetic to be very inspirational. My version is based on a pointillism concept and relatively simple, but I was happy with how it turned out.",
      "sourceCodeLink": "https://github.com/ericyd/generative-art/blob/69ef7640ba493f4c9fc3c8c7a07004ad82da64d8/openrndr/src/main/kotlin/sketch/S21_SpaceInMyBody.kt",
      "comments": "",
      "createdAt": "2021-01-07"
    },
    {
      "title": "Glacial etchings",
      "imageSeries": [
        {
          "src": "https://res.cloudinary.com/ericyd/image/upload/v1609116962/sketch.flow.F12_Curl2-2020-12-27-18.54.12_tf8onv.png",
          "srcSmall": "https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1609116962/sketch.flow.F12_Curl2-2020-12-27-18.54.12_tf8onv.png"
        },
        {
          "src": "https://res.cloudinary.com/ericyd/image/upload/v1609116845/2020-12-27T18.47.42-seed-189526243_izu0cv.png",
          "srcSmall": "https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1609116845/2020-12-27T18.47.42-seed-189526243_izu0cv.png"
        },
        {
          "src": "https://res.cloudinary.com/ericyd/image/upload/v1609116849/2020-12-27T18.50.11-seed-1292204817_jyftcu.png",
          "srcSmall": "https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1609116849/2020-12-27T18.50.11-seed-1292204817_jyftcu.png"
        }
      ],
      "description": "This is one of my favorite series I've done (at the of writing). It feels so stark and powerful, yet it uses really simple principles that I've used in many other drawings. The only real difference is the noise algorithm that is used to calculate the flow field. The images in this series are actually from a few different sketch files I created. However, they all use essentially the same process and very similar algorithms so I bundled it into a single series. See <a href='https://github.com/ericyd/generative-art/blob/6be959f56eb58afae8588eac915f16fa0f075cec/openrndr/src/main/kotlin/sketch/flow/F15_CurlOfCurl.kt'>this code</a> for additional source material. I completed these in the past (Oct 13, 2020) but hadn't gotten around to re-rendering them for this personal site so here they are!",
      "sourceCodeLink": "https://github.com/ericyd/generative-art/blob/6be959f56eb58afae8588eac915f16fa0f075cec/openrndr/src/main/kotlin/sketch/flow/F12_Curl2.kt",
      "comments": "",
      "createdAt": "2020-10-13"
    },
    {
      "title": "Electric Eye",
      "imageSeries": [
        {
          "src": "https://res.cloudinary.com/ericyd/image/upload/v1607818933/good-2020-12-12T18.08.19-seed-1617241088_yvcnk6.png",
          "srcSmall": "https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1607818933/good-2020-12-12T18.08.19-seed-1617241088_yvcnk6.png"
        }
      ],
      "description": "Using a fractal-subdivision algorithm inspired by <a href='http://rectangleworld.com/blog/archives/462'>Rectangle World</a>, and additive blending + blur post effects, we make... The Electric Eye! (More in-depth description of algorithm in source code.)",
      "sourceCodeLink": "https://github.com/ericyd/generative-art/blob/7c152cc5a2d4e29d6713d9d1f2c151046b27a478/openrndr/src/main/kotlin/sketch/S20_ElectricEye.kt",
      "comments": "",
      "createdAt": "2020-12-12"
    },
    {
      "title": "Glowing graph",
      "imageSeries": [
        {
          "src": "https://res.cloudinary.com/ericyd/image/upload/v1607654447/nice-2020-12-10T15.36.16-seed-1933540311_kossmk.png",
          "srcSmall": "https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1607654447/nice-2020-12-10T15.36.16-seed-1933540311_kossmk.png"
        }
      ],
      "description": "Using the same algorithm as before to do the circle packing, now the nodes are connected as a graph. An <em>electrified</em> graph!",
      "sourceCodeLink": "https://github.com/ericyd/generative-art/blob/5150aa37d0ef1be4168d58a5f607a98c3a190ed5/openrndr/src/main/kotlin/sketch/S18_GlowingGraph.kt",
      "comments": "",
      "createdAt": "2020-12-10"
    },
    {
      "title": "Noisy circle packing",
      "imageSeries": [
        {
          "src": "https://res.cloudinary.com/ericyd/image/upload/v1607558352/2020-12-09T17.33.57-seed-205225107_wi8dac.png",
          "srcSmall": "https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1607558352/2020-12-09T17.33.57-seed-205225107_wi8dac.png"
        }
      ],
      "description": "Based on <a href='http://www.codeplastic.com/2017/09/09/controlled-circle-packing-with-processing/'>this post</a>. I posted a video of the animation <a href='https://www.reddit.com/r/generative/comments/ka3vaq/satisfying_conclusion_trypophobics_beware/'>on Reddit</a> if you want to see it animate - I thought it was pretty cool!",
      "sourceCodeLink": "https://github.com/ericyd/generative-art/blob/db315601967cfb13e8bc4b9fd5d60eba77641338/openrndr/src/main/kotlin/sketch/S16_NoisyCirclePack.kt",
      "comments": "",
      "createdAt": "2020-12-09"
    },
    {
      "title": "Space in my mind",
      "imageSeries": [
        {
          "src": "https://res.cloudinary.com/ericyd/image/upload/v1607397402/uploader---2020-12-07T21.12.33-seed-2081555229_ko6caj.png",
          "srcSmall": "https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1607397402/uploader---2020-12-07T21.12.33-seed-2081555229_ko6caj.png"
        }
      ],
      "description": "'If I have space, space for my body; then I can have space, space in my mind' - Scott Pemberton Trio",
      "sourceCodeLink": "https://github.com/ericyd/generative-art/blob/230bebf16661034e59b6ab29edb304322bd62ade/openrndr/src/main/kotlin/sketch/S15_SpaceForMyMind.kt",
      "comments": "",
      "createdAt": "2020-12-07"
    },
    {
      "title": "Generative hatching with concentration gradients",
      "imageSeries": [
        {
          "src": "https://res.cloudinary.com/ericyd/image/upload/v1607197826/2020-12-05T13.46.16-seed-938821407_qhxnws.png",
          "srcSmall": "https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1607197826/2020-12-05T13.46.16-seed-938821407_qhxnws.png"
        }
      ],
      "description": "Still aiming for the cool 3D effects shown by <a href='https://www.instagram.com/piterpasma/'>@piterpasma (instagram)</a>, but without actually using 3D. This version uses a concept of 'concentration gradients' to create the distribution of hashes. It is pretty flexible - you can either define a radial gradient or bilinear gradient to determine where the hashes are dense and where they are spread out.",
      "sourceCodeLink": "https://github.com/ericyd/generative-art/blob/1099ce9a1359d2973146b5120c4f15ba0b2776ea/openrndr/src/main/kotlin/sketch/S14_Hatching5.kt",
      "comments": "",
      "createdAt": "2020-12-05"
    },
    {
      "title": "Generative hatching v4",
      "imageSeries": [
        {
          "src": "https://res.cloudinary.com/ericyd/image/upload/v1606794213/2020-11-30T16.25.44-seed-1651409604_streen.png",
          "srcSmall": "https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1606794213/2020-11-30T16.25.44-seed-1651409604_streen.png"
        }
      ],
      "description": "Generative hatching/cross-hatching. Heavily inspired by <a href='https://www.instagram.com/kirbyufo/'>@kirbyufo (instagram)</a> and <a href='https://www.instagram.com/piterpasma/'>@piterpasma (instagram)</a>. First, shapes are generated from some parameters. Next, hashes are added inside the shape's bounding box using <a href='https://generativeartistry.com/tutorials/circle-packing/'>circle</a> <a href='https://sighack.com/post/simple-stippling-via-circle-packing'>packing</a>. Next, <a href='https://github.com/openrndr/openrndr/blob/409f2d26e62cec27aeb227c5d5a6b1e01cd32ee8/openrndr-core/src/main/kotlin/org/openrndr/shape/CompositionDrawer.kt#L577-L582'>an OPENRNDR API</a> clips the paths against the shape itself so that only the hashes that are inside the shape are shown. (There are muliple \"clipping points\" in this image.)",
      "sourceCodeLink": "https://github.com/ericyd/generative-art/blob/58597acf254a1ae5111a087948174b72c5e47cc2/openrndr/src/main/kotlin/sketch/S13_Hatching4.kt",
      "comments": "for the imageSrcSmall, the only difference is the /c_scale,w_500/ param. Also, only the attributes above here are used, but maybe one day I'll want more",
      "createdAt": "2020-11-31"
    }
  ]
}

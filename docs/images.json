{"warnings":["DO NOT EDIT THIS FILE MANUALLY, IT IS AUTO-GENERATED WITH build-json-payload.js"],"notes":["add c_scale,w_500/ param to 'imageSrcSmall' URLs after /upload/ param"],"images":[{"title":"Meandering River","imageSeries":[{"src":"https://res.cloudinary.com/ericyd/image/upload/v1613414537/2021-02-14T15.24.04-seed-1439963559_gvgxzk.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1613414537/2021-02-14T15.24.04-seed-1439963559_gvgxzk.png"},{"src":"https://res.cloudinary.com/ericyd/image/upload/v1613414535/2021-02-14T15.21.22-seed-1849979458_wgoa2e.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1613414535/2021-02-14T15.21.22-seed-1849979458_wgoa2e.png"},{"src":"https://res.cloudinary.com/ericyd/image/upload/v1613414549/2021-02-15T12.28.56-seed-1692932679_ag2hiy.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1613414549/2021-02-15T12.28.56-seed-1692932679_ag2hiy.png"},{"src":"https://res.cloudinary.com/ericyd/image/upload/v1613414550/2021-02-15T12.11.31-seed-1692932679_bzmhu6.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1613414550/2021-02-15T12.11.31-seed-1692932679_bzmhu6.png"},{"src":"https://res.cloudinary.com/ericyd/image/upload/v1613419398/2021-02-15T13.55.59-seed-1288818041_vdc6t7.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1613419398/2021-02-15T13.55.59-seed-1288818041_vdc6t7.png"},{"src":"https://res.cloudinary.com/ericyd/image/upload/v1613419408/2021-02-15T13.23.37-seed-359561763_s1zcxg.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1613419408/2021-02-15T13.23.37-seed-359561763_s1zcxg.png"}],"description":"I've been working on various parts of this project for about a month and it felt like it was time to call it \"done\". This project is original code, but not original concepts. I was incredibly inspired by <a href=\"http://roberthodgin.com/project/meander\">Meander by Robert Hodgin</a> (originally posted on Reddit <a href=\"https://www.reddit.com/r/Houdini/comments/glbj28/procedural_river_meander_map/\">here</a>) and used his description to write my own version. Almost every piece of generative art I've made has been based on concepts I've found in others' works, so I don't find this to be unusual at all. Eventually I hope that I'll level up and be able to create these types of ideas myself, but for now I'm plenty satisfied imitating others and taking a different spin on it. All of these use the same underlying algorithm to creating the meandering river, but they utilize the result in different ways (grouping into layers, adding color, duplicating various parts, etc). The source code for these comes from a few different sketches: <ul><li><a href=\"https://github.com/ericyd/generative-art/blob/665ac5d1c3dd20cea896cf35b10b5973fcbe6227/openrndr/src/main/kotlin/sketch/S24_MeanderClone2.kt\">MeanderClone2</a></li> <li><a href=\"https://github.com/ericyd/generative-art/blob/665ac5d1c3dd20cea896cf35b10b5973fcbe6227/openrndr/src/main/kotlin/sketch/S25_MeanderClone3.kt\">MeanderClone3</a></li> <li><a href=\"https://github.com/ericyd/generative-art/blob/1f5f916a6c78ea92bcc07ced47ac8063eba31f58/openrndr/src/main/kotlin/sketch/S26_MeanderClone4.kt\">MeanderClone4</a></li> </ul> A fun extra: If you'd like to see the rivers animate, head over to Reddit! You can see two different videos <a href=\"https://www.reddit.com/r/generative/comments/lbdhl6/another_meandering_river/\">here</a> and <a href=\"https://www.reddit.com/r/generative/comments/lfsl8t/pop_art_meandering_river/\">here</a>. My very first iteration is nice to just view the dynamics of the system: you can see that <a href=\"https://www.reddit.com/r/generative/comments/l9t1kv/clone_of_meander_by_robert_hodgin/\">here</a>","sourceCodeLink":"https://github.com/ericyd/generative-art/blob/665ac5d1c3dd20cea896cf35b10b5973fcbe6227/openrndr/src/main/kotlin/shape/MeanderingRiver.kt","comments":null,"createdAt":"2021-02-15","id":"meandering-river"},{"title":"Resistance","imageSeries":[{"src":"https://res.cloudinary.com/ericyd/image/upload/v1611446281/flow_field4_2020-05-17T13-55-17_000__hlbc0f.jpg","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1611446281/flow_field4_2020-05-17T13-55-17_000__hlbc0f.jpg"}],"description":"This is an old piece (May 17, 2020) but I included it in a blog post I wrote about generative art and I wanted to include a link to the article here. Check it out if you have spare time! <a href='https://ericyd.hashnode.dev/if-you-can-code-then-make-art-else-return-false' target='_blank'>If you can code, then make art. Else, return false</a>.","sourceCodeLink":"https://github.com/ericyd/generative-art/blob/bd9c2cd0475ce9e416a733459729fded1b55c569/nannou/examples/flow_field4.rs","comments":null,"createdAt":"2020-05-17","id":"resistance"},{"title":"Differential River","imageSeries":[{"src":"https://res.cloudinary.com/ericyd/image/upload/v1611171090/2021-01-20T13.24.37-seed-1811518835-frame-700_pitvvg.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1611171090/2021-01-20T13.24.37-seed-1811518835-frame-700_pitvvg.png"},{"src":"https://res.cloudinary.com/ericyd/image/upload/v1611171058/2021-01-20T13.26.59-seed-903794385-frame-500_ie2xcj.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1611171058/2021-01-20T13.26.59-seed-903794385-frame-500_ie2xcj.png"},{"src":"https://res.cloudinary.com/ericyd/image/upload/v1611171116/2021-01-20T12.41.31-seed-1757716594-frame-500_fe2oga.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1611171116/2021-01-20T12.41.31-seed-1757716594-frame-500_fe2oga.png"}],"description":"I have been seeing examples of differential line growth around the web lately and it inspired me to play with it. I realized that differential line growth has a similar form to meandering river systems, and I wanted to see how close I could get to a convincing meandering river interpretation. I wasn't able to fully dial in the 'river' look I was going for, but I was happy with the result nonetheless. My algorithm began as a copy/paste from  <a href='http://www.codeplastic.com/2017/07/22/differential-line-growth-with-processing/' target='_blank'>this example on codeplastic.com</a>, and I was also inspired by <a href='https://inconvergent.net/generative/differential-line/' target='_blank'>this example on inconvergent.net</a>. I highly recommend both examples if you want to dive in deeper, or of course you can check out my source code below!","sourceCodeLink":"https://github.com/ericyd/generative-art/blob/e21ce3c2f4c67ed4b1afa8d5acc840ae4ad80fba/openrndr/src/main/kotlin/sketch/S22_DifferentialGrowthRiver.kt","comments":null,"createdAt":"2021-01-20","id":"differential-river"},{"title":"Orbital curl-ism","imageSeries":[{"src":"https://res.cloudinary.com/ericyd/image/upload/v1610722779/2021-01-15T08.57.19-seed-1457615494_dkspgf.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1610722779/2021-01-15T08.57.19-seed-1457615494_dkspgf.png"},{"src":"https://res.cloudinary.com/ericyd/image/upload/v1610722803/2021-01-15T08.57.40-seed-1451363752_nhouyw.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1610722803/2021-01-15T08.57.40-seed-1451363752_nhouyw.png"}],"description":"I was really pleased with my last piece and wanted to riff on it. The flow field algorithm used here is a combination of my 'orbital' flow used in my last work and curl noise. Enjoy! üë®üèº‚Äçüç≥","sourceCodeLink":"https://github.com/ericyd/generative-art/blob/e28d1b9f3cc358a58d7d43dee5dcf2bd51f931a0/openrndr/src/main/kotlin/sketch/flow/F20_OrbitCurlNoOverlap.kt","comments":null,"createdAt":"2021-01-15","id":"orbital-curl-ism"},{"title":"Orbital pointillism","imageSeries":[{"src":"https://res.cloudinary.com/ericyd/image/upload/v1610319118/2021-01-10T15.34.54-seed-1859366810_kh3iwv.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1610319118/2021-01-10T15.34.54-seed-1859366810_kh3iwv.png"},{"src":"https://res.cloudinary.com/ericyd/image/upload/v1610319123/2021-01-10T15.34.59-seed-1319521965_qdp1oa.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1610319123/2021-01-10T15.34.59-seed-1319521965_qdp1oa.png"},{"src":"https://res.cloudinary.com/ericyd/image/upload/v1610319117/2021-01-10T15.35.14-seed-458649401_zuqer4.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1610319117/2021-01-10T15.35.14-seed-458649401_zuqer4.png"}],"description":"Tyler Hobbes is obviously an amazing artist. While I was appreciating one of his pieces the other day, I realized how his use of negative space in flow fields creates a really distinct texture for a piece. Many flow field algorithms will produce lines that overlap and intersect at various places. That can be a great look, but creating negative space between lines (or in this case, points) can really emphasis certain aspects of the flow field and draw attention to different details. I used the same pointillism code that I used in my previous post but used an orbital flow field algorithm I developed a few months ago to create a pointillism flow field that I was really pleased with. It's always fun when a piece has so many good variations that it's hard to pick a final few renderings. This was just such a piece!!","sourceCodeLink":"https://github.com/ericyd/generative-art/blob/8c8c3cdcb43be10c76df54b66651eeccc8db55ab/openrndr/src/main/kotlin/sketch/flow/F19_OrbitNoOverlap.kt","comments":null,"createdAt":"2021-01-10","id":"orbital-pointillism"},{"title":"Space in my body","id":"space-in-my-body","imageSeries":[{"src":"https://res.cloudinary.com/ericyd/image/upload/v1610072964/2021-01-07T20.12.01-seed-99178672_bdw5oe.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1610072964/2021-01-07T20.12.01-seed-99178672_bdw5oe.png"}],"description":"This was a really fun sketch to develop. It is heavily influenced by one of my favorite artists on Instagram, <a href='https://www.instagram.com/jetsyart/'>jetsyart</a>. They do not use generative methods but I find their asthetic to be very inspirational. My version is based on a pointillism concept and relatively simple, but I was happy with how it turned out.","sourceCodeLink":"https://github.com/ericyd/generative-art/blob/69ef7640ba493f4c9fc3c8c7a07004ad82da64d8/openrndr/src/main/kotlin/sketch/S21_SpaceInMyBody.kt","comments":null,"createdAt":"2021-01-07"},{"title":"Glacial etchings","imageSeries":[{"src":"https://res.cloudinary.com/ericyd/image/upload/v1609116962/sketch.flow.F12_Curl2-2020-12-27-18.54.12_tf8onv.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1609116962/sketch.flow.F12_Curl2-2020-12-27-18.54.12_tf8onv.png"},{"src":"https://res.cloudinary.com/ericyd/image/upload/v1609116845/2020-12-27T18.47.42-seed-189526243_izu0cv.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1609116845/2020-12-27T18.47.42-seed-189526243_izu0cv.png"},{"src":"https://res.cloudinary.com/ericyd/image/upload/v1609116849/2020-12-27T18.50.11-seed-1292204817_jyftcu.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1609116849/2020-12-27T18.50.11-seed-1292204817_jyftcu.png"}],"description":"This is one of my favorite series I've done (at the time of writing). It feels so stark and powerful, yet it uses really simple principles that I've used in many other drawings. The only real difference is the noise algorithm that is used to calculate the flow field. The images in this series are actually from a few different sketch files I created. However, they all use essentially the same process and very similar algorithms so I bundled it into a single series. See <a href='https://github.com/ericyd/generative-art/blob/6be959f56eb58afae8588eac915f16fa0f075cec/openrndr/src/main/kotlin/sketch/flow/F15_CurlOfCurl.kt'>this code</a> for additional source material. I completed these in the past (Oct 13, 2020) but hadn't gotten around to re-rendering them for this personal site so here they are!","sourceCodeLink":"https://github.com/ericyd/generative-art/blob/6be959f56eb58afae8588eac915f16fa0f075cec/openrndr/src/main/kotlin/sketch/flow/F12_Curl2.kt","comments":null,"createdAt":"2020-10-13","id":"glacial-etchings"},{"title":"Electric Eye","imageSeries":[{"src":"https://res.cloudinary.com/ericyd/image/upload/v1607818933/good-2020-12-12T18.08.19-seed-1617241088_yvcnk6.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1607818933/good-2020-12-12T18.08.19-seed-1617241088_yvcnk6.png"}],"description":"Using a fractal-subdivision algorithm inspired by <a href='http://rectangleworld.com/blog/archives/462'>Rectangle World</a>, and additive blending + blur post effects, we make... The Electric Eye! (More in-depth description of algorithm in source code.)","sourceCodeLink":"https://github.com/ericyd/generative-art/blob/7c152cc5a2d4e29d6713d9d1f2c151046b27a478/openrndr/src/main/kotlin/sketch/S20_ElectricEye.kt","comments":null,"createdAt":"2020-12-12","id":"electric-eye"},{"title":"Glowing graph","imageSeries":[{"src":"https://res.cloudinary.com/ericyd/image/upload/v1607654447/nice-2020-12-10T15.36.16-seed-1933540311_kossmk.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1607654447/nice-2020-12-10T15.36.16-seed-1933540311_kossmk.png"}],"description":"Using the same algorithm as before to do the circle packing, now the nodes are connected as a graph. An <em>electrified</em> graph!","sourceCodeLink":"https://github.com/ericyd/generative-art/blob/5150aa37d0ef1be4168d58a5f607a98c3a190ed5/openrndr/src/main/kotlin/sketch/S18_GlowingGraph.kt","comments":null,"createdAt":"2020-12-10","id":"glowing-graph"},{"title":"Noisy circle packing","imageSeries":[{"src":"https://res.cloudinary.com/ericyd/image/upload/v1607558352/2020-12-09T17.33.57-seed-205225107_wi8dac.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1607558352/2020-12-09T17.33.57-seed-205225107_wi8dac.png"}],"description":"Based on <a href='http://www.codeplastic.com/2017/09/09/controlled-circle-packing-with-processing/'>this post</a>. I posted a video of the animation <a href='https://www.reddit.com/r/generative/comments/ka3vaq/satisfying_conclusion_trypophobics_beware/'>on Reddit</a> if you want to see it animate - I thought it was pretty cool!","sourceCodeLink":"https://github.com/ericyd/generative-art/blob/db315601967cfb13e8bc4b9fd5d60eba77641338/openrndr/src/main/kotlin/sketch/S16_NoisyCirclePack.kt","comments":null,"createdAt":"2020-12-09","id":"noisy-circle-packing"},{"title":"Space in my mind","id":"space-in-my-mind","imageSeries":[{"src":"https://res.cloudinary.com/ericyd/image/upload/v1607397402/uploader---2020-12-07T21.12.33-seed-2081555229_ko6caj.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1607397402/uploader---2020-12-07T21.12.33-seed-2081555229_ko6caj.png"}],"description":"'If I have space, space for my body; then I can have space, space in my mind' - Scott Pemberton Trio","sourceCodeLink":"https://github.com/ericyd/generative-art/blob/230bebf16661034e59b6ab29edb304322bd62ade/openrndr/src/main/kotlin/sketch/S15_SpaceForMyMind.kt","comments":null,"createdAt":"2020-12-07"},{"title":"Generative hatching with concentration gradients","imageSeries":[{"src":"https://res.cloudinary.com/ericyd/image/upload/v1607197826/2020-12-05T13.46.16-seed-938821407_qhxnws.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1607197826/2020-12-05T13.46.16-seed-938821407_qhxnws.png"}],"description":"Still aiming for the cool 3D effects shown by <a href='https://www.instagram.com/piterpasma/'>@piterpasma (instagram)</a>, but without actually using 3D. This version uses a concept of 'concentration gradients' to create the distribution of hashes. It is pretty flexible - you can either define a radial gradient or bilinear gradient to determine where the hashes are dense and where they are spread out.","sourceCodeLink":"https://github.com/ericyd/generative-art/blob/1099ce9a1359d2973146b5120c4f15ba0b2776ea/openrndr/src/main/kotlin/sketch/S14_Hatching5.kt","comments":null,"createdAt":"2020-12-05","id":"generative-hatching-with-concentration-gradients"},{"title":"Generative hatching v4","imageSeries":[{"src":"https://res.cloudinary.com/ericyd/image/upload/v1606794213/2020-11-30T16.25.44-seed-1651409604_streen.png","srcSmall":"https://res.cloudinary.com/ericyd/image/upload/c_scale,w_500/v1606794213/2020-11-30T16.25.44-seed-1651409604_streen.png"}],"description":"Generative hatching/cross-hatching. Heavily inspired by <a href='https://www.instagram.com/kirbyufo/'>@kirbyufo (instagram)</a> and <a href='https://www.instagram.com/piterpasma/'>@piterpasma (instagram)</a>. First, shapes are generated from some parameters. Next, hashes are added inside the shape's bounding box using <a href='https://generativeartistry.com/tutorials/circle-packing/'>circle</a> <a href='https://sighack.com/post/simple-stippling-via-circle-packing'>packing</a>. Next, <a href='https://github.com/openrndr/openrndr/blob/409f2d26e62cec27aeb227c5d5a6b1e01cd32ee8/openrndr-core/src/main/kotlin/org/openrndr/shape/CompositionDrawer.kt#L577-L582'> an OPENRNDR API</a> clips the paths against the shape itself so that only the hashes that are inside the shape are shown. (There are muliple \"clipping points\" in this image.)","sourceCodeLink":"https://github.com/ericyd/generative-art/blob/58597acf254a1ae5111a087948174b72c5e47cc2/openrndr/src/main/kotlin/sketch/S13_Hatching4.kt","comments":"for the imageSrcSmall, the only difference is the /c_scale,w_500/ param. Also, only the attributes above here are used, but maybe one day I'll want more","createdAt":"2020-11-31","id":"generative-hatching-v4"}]}